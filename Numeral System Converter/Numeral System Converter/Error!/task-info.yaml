type: edu
custom_name: stage6
files:
- name: test/ConverterTest.java
  visible: false
  text: |
    import converter.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;

    class Clue {
        final String input;
        String answer;
        final boolean provideAnswer;

        Clue(final String input, final String answer, final boolean provideAnswer) {
            this.input = input;
            this.answer = answer;
            this.provideAnswer = provideAnswer;
        }

        Clue(final String input, final String answer) {
            this(input, answer, false);
        }

        Clue(final String input) {
            this(input, null, false);
        }
    }


    public class ConverterTest extends StageTest<Clue> {

        public ConverterTest() {
            super(Main.class);
        }

        static TestCase<Clue> testToAnswer(final String input, final String answer, final boolean provideAnswer) {
            return new TestCase<Clue>()
                .setAttach(new Clue(input, answer, provideAnswer))
                .setInput(input);
        }

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                /* Tests with a hint: */
                testToAnswer("a b\n\n\n", null, true),
                testToAnswer("11\nabc\n\n", null, true),
                testToAnswer("11\n1\ndas\n", null, true),
                testToAnswer("0\n1\ndas\n", null, true),
                testToAnswer("37\n1\ndas\n", null, true),
                testToAnswer("36\n1\n0\n", null, true),
                testToAnswer("36\n1\n37\n", null, true),

                /* Tests without a hint: */
                testToAnswer("c\n\n\n", null, false),
                testToAnswer("12\nbc\n\n", null, false),
                testToAnswer("12\n1\nhf\n", null, false),
                testToAnswer("0\n2\nhf\n", null, false),
                testToAnswer("37\n2\nhf\n", null, false),
                testToAnswer("14\n2\n-1\n", null, false),
                testToAnswer("14\n2\n38\n", null, false),

                /* Tests from previous stage (with a hint): */
                testToAnswer("10\n0.234\n7", "0.14315", true),
                testToAnswer("10\n10.234\n7", "13.14315", true),
                testToAnswer("6\n2.555\n1", "11", true),
                testToAnswer("35\naf.xy\n17", "148.g88a8", true),
                testToAnswer("10\n11\n2", "1011", true),
                testToAnswer("16\naaaaa.0\n24", "22df2.00000", true),
                testToAnswer("16\n0.cdefb\n24", "0.j78da", true),
                testToAnswer("16\naaaaa.cdefb\n24", "22df2.j78da", true),

                /* Tests from previous stage (without a hint): */
                testToAnswer("10\n0.2340\n7", "0.14315", false),
                testToAnswer("10\n10.2340\n7", "13.14315", false),
                testToAnswer("6\n2.5550\n1", "11", false),
                testToAnswer("35\naf.xy0\n17", "148.g88a8", false),
                testToAnswer("10\n12\n2", "1100", false),
                testToAnswer("16\naaaaa.00\n24", "22df2.00000", false),
                testToAnswer("16\n0.cdefb0\n24", "0.j78da", false),
                testToAnswer("16\naaaaa.cdefb0\n24", "22df2.j78da", false),

                /* Tests from previous stage (with a hint): */
                testToAnswer("10\n11\n2\n", "1011", true),
                testToAnswer("1\n11111\n10\n", "5", true),
                testToAnswer("10\n1000\n36\n", "rs", true),
                testToAnswer("21\n4242\n6\n", "451552", true),
                testToAnswer("7\n12\n11\n", "9", true),
                testToAnswer("5\n300\n10\n", "75", true),
                testToAnswer("1\n11111\n5\n", "10", true),
                testToAnswer("10\n4\n1\n", "1111", true),

                /* Tests from previous stage (without a hint): */
                testToAnswer("10\n12\n2\n", "1100", false),
                testToAnswer("1\n1111111\n10\n", "7", false),
                testToAnswer("10\n1001\n36\n", "rt", false),
                testToAnswer("21\n4243\n6\n", "451553", false),
                testToAnswer("7\n13\n11\n", "a", false),
                testToAnswer("5\n301\n10\n", "76", false),
                testToAnswer("1\n111111\n5\n", "11", false),
                testToAnswer("10\n5\n1\n", "11111", false)
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            final String[] lines = reply
                .lines()
                .filter(line -> !line.isEmpty())
                .toArray(String[]::new);

            if (lines.length == 0) {
                return new CheckResult(
                    false,
                    "Your program doesn't print any line."
                );
            }

            String answer = lines[lines.length - 1];

            if (clue.answer == null) {
                if (answer.toLowerCase().contains("error")) {
                    return new CheckResult(true);
                } else if (clue.provideAnswer) {
                    return new CheckResult(
                        false,
                        "Your program doesn't say about an error.\n" +
                            "This is a sample test so we give you a hint.\n" +
                            "Input: " + clue.input + "\n" +
                            "Your answer: " + answer
                    );
                } else {
                    return new CheckResult(
                        false,
                        "Your program doesn't say about an error."
                    );
                }
            }

            answer = answer.replaceAll("[^\\p{Graph}]", "");
            clue.answer = clue.answer.replaceAll("[^\\p{Graph}]", "");

            answer = removeEndZeros(answer);
            clue.answer = removeEndZeros(clue.answer);

            if (!answer.equals(clue.answer)) {
                if (clue.provideAnswer) {
                    return new CheckResult(
                        false,
                        "Your program gives a wrong answer when there is no error in the input.\n" +
                            "This is a sample test so we give you a hint.\n" +
                            "Input: " + clue.input + "\n" +
                            "Your answer: " + answer + "\n" +
                            "Correct answer: " + clue.answer
                    );
                } else {
                    return new CheckResult(
                        false,
                        "Your program gives a wrong answer when there is no error in the input."
                    );
                }
            }

            return new CheckResult(true);
        }

        private String removeEndZeros(String number) {
            if (!number.contains(".")) {
                return number;
            }
            while (number.endsWith("0")) {
                number = number.substring(0, number.length() - 1);
            }
            if (number.endsWith(".")) {
                number = number.substring(0, number.length() - 1);
            }
            return number;
        }
    }
  learner_created: false
- name: src/converter/DigitsConverter.java
  visible: true
  text: |
    package converter;

    public class DigitsConverter {

        public static String[] changeLettersToDigits(String[] splittedFractionalPart) {
            String[] result = new String[splittedFractionalPart.length];
            for (int i = 0; i < splittedFractionalPart.length; i++) {
                switch (splittedFractionalPart[i]) {
                    case "1":
                        result[i] = "1";
                        break;
                    case "2":
                        result[i] = "2";
                        break;
                    case "3":
                        result[i] = "3";
                        break;
                    case "4":
                        result[i] = "4";
                        break;
                    case "5":
                        result[i] = "5";
                        break;
                    case "6":
                        result[i] = "6";
                        break;
                    case "7":
                        result[i] = "7";
                        break;
                    case "8":
                        result[i] = "8";
                        break;
                    case "9":
                        result[i] = "9";
                        break;
                    case "0":
                        result[i] = "0";
                        break;
                    case "a":
                        result[i] = "10";
                        break;
                    case "b":
                        result[i] = "11";
                        break;
                    case "c":
                        result[i] = "12";
                        break;
                    case "d":
                        result[i] = "13";
                        break;
                    case "e":
                        result[i] = "14";
                        break;
                    case "f":
                        result[i] = "15";
                        break;
                    case "g":
                        result[i] = "16";
                        break;
                    case "h":
                        result[i] = "17";
                        break;
                    case "i":
                        result[i] = "18";
                        break;
                    case "j":
                        result[i] = "19";
                        break;
                    case "k":
                        result[i] = "20";
                        break;
                    case "l":
                        result[i] = "21";
                        break;
                    case "m":
                        result[i] = "22";
                        break;
                    case "n":
                        result[i] = "23";
                        break;
                    case "o":
                        result[i] = "24";
                        break;
                    case "p":
                        result[i] = "25";
                        break;
                    case "q":
                        result[i] = "26";
                        break;
                    case "r":
                        result[i] = "27";
                        break;
                    case "s":
                        result[i] = "28";
                        break;
                    case "t":
                        result[i] = "29";
                        break;
                    case "u":
                        result[i] = "30";
                        break;
                    case "v":
                        result[i] = "31";
                        break;
                    case "w":
                        result[i] = "32";
                        break;
                    case "x":
                        result[i] = "33";
                        break;
                    case "y":
                        result[i] = "34";
                        break;
                    case "z":
                        result[i] = "35";
                        break;
                }
            }
            return result;
        }

        public static String changeDigitsToLetters(String fractional) {
            String result = "";
            switch (fractional) {
                case "1":
                    result = "1";
                    break;
                case "2":
                    result = "2";
                    break;
                case "3":
                    result = "3";
                    break;
                case "4":
                    result = "4";
                    break;
                case "5":
                    result = "5";
                    break;
                case "6":
                    result = "6";
                    break;
                case "7":
                    result = "7";
                    break;
                case "8":
                    result = "8";
                    break;
                case "9":
                    result = "9";
                    break;
                case "0":
                    result = "0";
                    break;
                case "10":
                    result = "a";
                    break;
                case "11":
                    result = "b";
                    break;
                case "12":
                    result = "c";
                    break;
                case "13":
                    result = "d";
                    break;
                case "14":
                    result = "e";
                    break;
                case "15":
                    result = "f";
                    break;
                case "16":
                    result = "g";
                    break;
                case "17":
                    result = "h";
                    break;
                case "18":
                    result = "i";
                    break;
                case "19":
                    result = "j";
                    break;
                case "20":
                    result = "k";
                    break;
                case "21":
                    result = "l";
                    break;
                case "22":
                    result = "m";
                    break;
                case "23":
                    result = "n";
                    break;
                case "24":
                    result = "o";
                    break;
                case "25":
                    result = "p";
                    break;
                case "26":
                    result = "q";
                    break;
                case "27":
                    result = "r";
                    break;
                case "28":
                    result = "s";
                    break;
                case "29":
                    result = "t";
                    break;
                case "30":
                    result = "u";
                    break;
                case "31":
                    result = "v";
                    break;
                case "32":
                    result = "w";
                    break;
                case "33":
                    result = "x";
                    break;
                case "34":
                    result = "y";
                    break;
                case "35":
                    result = "z";
                    break;
            }

            return result;
        }
    }
  learner_created: true
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            int sourceRadix = scanner.nextInt();
            String sourceNumber = scanner.next();
            int targetRadix = scanner.nextInt();
            String[] splittedIntoIntegerAndFractional = new String[0];

            int integerPartDecimal = 0;
            double fractionalPartDecimal = 0;
            String integerPartConverted = "";

            if (sourceRadix == 1) {
                String[] sourceNumbers = sourceNumber.split("");
                for (int i = 0; i < sourceNumbers.length; i++) {
                    integerPartDecimal += Integer.parseInt(sourceNumbers[i]);
                }
            } else {
                splittedIntoIntegerAndFractional = sourceNumber.split("\\.");
                if (splittedIntoIntegerAndFractional.length <= 1) {
                    integerPartDecimal = Integer.parseInt(sourceNumber, sourceRadix);
                } else {
                    integerPartDecimal = Integer.parseInt(splittedIntoIntegerAndFractional[0], sourceRadix);
                    String[] splittedFractionalPart = splittedIntoIntegerAndFractional[1].split("");
                    String[] splittedFractionalPartWithoutLetters = DigitsConverter.changeLettersToDigits(splittedFractionalPart);
                    for (int i = 1; i <= splittedIntoIntegerAndFractional[1].length(); i++) {
                        fractionalPartDecimal += Double.parseDouble(splittedFractionalPartWithoutLetters[i - 1]) / Math.pow(sourceRadix, i);
                    }
                }
            }

            if (targetRadix == 1) {
                String result = "";
                for (int i = 0; i < integerPartDecimal; i++) {
                    result += "1";
                }
                System.out.println(result);
            } else {
                if (splittedIntoIntegerAndFractional.length <= 1) {
                    System.out.println(Integer.toString(integerPartDecimal, targetRadix));
                } else {
                    integerPartConverted = Integer.toString(integerPartDecimal, targetRadix);
                    double temp = fractionalPartDecimal;
                    String result = "";
                    for (int i = 0; i < 5; i++) {
                        double fractional = temp * targetRadix;
                        String output = Double.toString(fractional);
                        String[] outputs = output.split("\\.");
                        result += DigitsConverter.changeDigitsToLetters(outputs[0]);
                        temp = Double.parseDouble("0." + outputs[1]);
                    }

                    System.out.println(integerPartConverted + "." + result);
                }

            }

        }


    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/41/stages/219/implement
status: Solved
record: -1
