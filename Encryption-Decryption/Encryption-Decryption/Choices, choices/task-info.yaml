type: edu
custom_name: stage6
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {
        public EncryptDecryptTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }

    }
  learner_created: false
- name: test/output.txt
  visible: true
  text: |
    111122223333
  learner_created: false
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |+
    package encryptdecrypt;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    import java.io.PrintWriter;
    import java.util.Arrays;
    import java.util.Scanner;

    public class Main {

        private final static Scanner scanner = new Scanner(System.in).useDelimiter("\\s");
        private static boolean isExport = false;
        private static String exportFileName = "";
        private static boolean isDataPresent = false;
        private static int dataIndex = 0;
        private static boolean isInPresent = false;
        private static int inIndex = 0;
        private static String method = "enc";
        private static String text = "";
        private static int key = 0;

        public static void main(String[] args) throws IOException {

            checkArguments(args);

            char[] textToChar = getText().toCharArray();
            //System.out.println("key: " + getKey());
            //System.out.println("text: " + getText());
            //System.out.println("method: " + getMethod());
            String result = encrypt(getKey(), textToChar, getMethod());
            System.out.println(result);

            if (isIsExport()) {
                exportToFile(getExportFileName(), result);
            }

        }

        private static String importFromFile(String filePath) throws FileNotFoundException {
            File file = new File(filePath);
            String output = "";
            if (!file.exists()) {
                System.out.println("File not found.");
            } else {
                Scanner scanFile = new Scanner(new File(filePath));
                while (scanFile.hasNext()) {
                    output = scanFile.nextLine();
                }
                scanFile.close();
            }

            return output;
        }

        private static void exportToFile(String filePath, String text) throws IOException {
            PrintWriter printWriter = new PrintWriter(filePath);
            printWriter.println(text);
            printWriter.flush();
        }

        private static String encrypt(int key, char[] textToChar, String method) {
            char[] output = new char[textToChar.length];
            int charNumber = 0;

            for (int i = 0; i < textToChar.length; i++) {
                charNumber = textToChar[i];
                if ("enc".equals(getMethod())) {
                    output[i] = (char) (charNumber + getKey());
                } else if ("dec".equals(getMethod())) {
                    output[i] = (char) (charNumber - getKey());
                }
            }
            return String.valueOf(output);
        }

        private static String getUserInput() {
            String answer = scanner.nextLine();
            return answer;
        }

        private static void checkArguments(String[] args) throws FileNotFoundException {
            setMethod("enc");
            setText("");
            setKey(0);

            for (int i = 0; i < args.length; i++) {
                if (args[i].equals("-mode")) {
                    setMethod(args[i + 1]);
                }
                if (args[i].equals("-data")) {
                    setDataIndex(i + 1);
                    setIsDataPresent(true);
                }
                if (args[i].equals("-in")) {
                    setInIndex(i + 1);
                    setIsInPresent(true);
                }
                if (args[i].equals("-key")) {
                    setKey(Integer.parseInt(args[i + 1]));
                }
                if (args[i].equals("-out")) {
                    setIsExport(true);
                    setExportFileName(args[i + 1]);
                }
            }
            if (isDataPresent) {
                setText(args[getDataIndex()]);
            } else if (isInPresent) {
                setText(importFromFile(args[getInIndex()]));
            }
        }

        public static boolean isIsExport() {
            return isExport;
        }

        public static void setIsExport(boolean isExport) {
            Main.isExport = isExport;
        }

        public static String getExportFileName() {
            return exportFileName;
        }

        public static void setExportFileName(String exportFileName) {
            Main.exportFileName = exportFileName;
        }

        public static boolean isIsDataPresent() {
            return isDataPresent;
        }

        public static void setIsDataPresent(boolean isDataPresent) {
            Main.isDataPresent = isDataPresent;
        }

        public static int getDataIndex() {
            return dataIndex;
        }

        public static void setDataIndex(int dataIndex) {
            Main.dataIndex = dataIndex;
        }

        public static boolean isIsInPresent() {
            return isInPresent;
        }

        public static void setIsInPresent(boolean isInPresent) {
            Main.isInPresent = isInPresent;
        }

        public static int getInIndex() {
            return inIndex;
        }

        public static void setInIndex(int inIndex) {
            Main.inIndex = inIndex;
        }

        public static String getMethod() {
            return method;
        }

        public static void setMethod(String method) {
            Main.method = method;
        }

        public static String getText() {
            return text;
        }

        public static void setText(String text) {
            Main.text = text;
        }

        public static int getKey() {
            return key;
        }

        public static void setKey(int key) {
            Main.key = key;
        }
    }

  learner_created: true
- name: src/encryptdecrypt/output.txt
  visible: true
  text: |2+

  learner_created: true
- name: output.txt
  visible: true
  text: |2+

  learner_created: true
- name: in.txt
  visible: true
  text: Welcome to hyperskill!
  learner_created: true
- name: src/encryptdecrypt/road_to_treasure.txt.txt
  visible: true
  text: Welcome to hyperskill!
  learner_created: true
- name: src/encryptdecrypt/in.txt
  visible: true
  text: Welcome to hyperskill!
  learner_created: true
- name: src/encryptdecrypt/ShiftAlgorithm.java
  visible: true
  learner_created: true
- name: src/encryptdecrypt/UnicodeAlgorithm.java
  visible: true
  learner_created: true
- name: src/encryptdecrypt/Algorithms.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/250/implement
status: Failed
record: 6
